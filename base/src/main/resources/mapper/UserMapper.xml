<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yzm.base.mapper.UserMapper">

    <resultMap id="baseResultMap" type="user">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="real_name" property="realName"/>
        <result column="password" property="password"/>
        <result column="gender" property="gender"/>
        <result column="remark" property="remark"/>
        <result column="state" property="state"/>
        <result column="deleted" property="deleted"/>
        <result column="update_date" property="updateDate"/>
        <result column="create_date" property="createDate"/>
        <result column="create_date_unix" property="createDateUnix"/>
    </resultMap>

    <sql id="Base_Column_List">
        id, username, real_name, password, gender, remark, state, deleted, update_date, create_date, create_date_unix
    </sql>

    <insert id="saveUser" parameterType="user">
        insert into `user`(username,real_name,password,gender,remark,update_date,create_date)
        values(#{username},#{realName},#{password},#{gender},#{remark},#{updateDate},#{createDate})
    </insert>

    <update id="updateUser" parameterType="user">
        update `user`
        set username = #{username}
        where id = #{id}
    </update>

    <insert id="deleteUserById" parameterType="integer">
        delete from `user`
        where id = #{id}
    </insert>

    <select id="getUserById" parameterType="integer" resultMap="baseResultMap">
        select
        <include refid="Base_Column_List"/>
        from `user`
        where id = #{id}
    </select>

    <select id="listUser" resultMap="baseResultMap">
        select
        <include refid="Base_Column_List"/>
        from `user`
    </select>

    <!--
        eviction（清除策略）：
            LRU – 最近最少使用：移除最长时间不被使用的对象。
            FIFO – 先进先出：按对象进入缓存的顺序来移除它们。
            SOFT – 软引用：基于垃圾回收器状态和软引用规则移除对象。
            WEAK – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。

        flushInterval（刷新间隔）：
            可以被设置为任意的正整数，设置的值应该是一个以毫秒为单位的合理时间量。
            默认情况是不设置，也就是没有刷新间隔，缓存仅仅会在调用语句时刷新。

        size（引用数目）：
            可以被设置为任意正整数，要注意欲缓存对象的大小和运行环境中可用的内存资源。默认值是 1024。

        readOnly（只读）：
            可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓存对象的相同实例。
            因此这些对象不能被修改。这就提供了可观的性能提升。而可读写的缓存会（通过序列化）返回缓存对象的拷贝。
            速度上会慢一些，但是更安全，因此默认值是 false。
    -->
    <cache
            eviction="FIFO"
            flushInterval="60000"
            size="1024"
            readOnly="false"/>

<!--    <cache-ref namespace="com.yzm.base.mapper.AccountMapper"/>-->

</mapper>
