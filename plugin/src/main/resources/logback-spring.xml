<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--
        scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
        scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
        debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
    -->

    <property name="pattern" value="%d{yyyy/MM/dd HH:mm:ss.SSS} %-5level [%thread] %logger{20}.%method:%L --%msg%n"/>
    <property name="logName" value="mybatis_%d-%i.log"/>

    <!-- 控制台打印 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <!--
                %d{HH: mm:ss.SSS}——日志输出时间
                %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用
                %-5level——日志级别，并且使用5个字符靠左对齐
                %logger{36}——日志输出者的名字
                %msg——日志消息
                %n——平台的换行符
                %Color
            -->
            <pattern>
<!--                ${pattern}-->
                %red(%d{yyyy/MM/dd HH:mm:ss.SSS}) %blue(%-5level) %green([%thread]) %boldMagenta(%logger{20}.%method):%L --%cyan(%msg%n)
            </pattern>
        </layout>
    </appender>

    <!-- 打印INFO、WARN级别的日志 -->
    <appender name="fileInfo" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，
            所以我们使用下面的策略，可以避免输出 Error 的日志-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <!--匹配到就禁止-->
            <onMatch>DENY</onMatch>
            <!--没有匹配到就允许-->
            <onMismatch>ACCEPT</onMismatch>
        </filter>
        <encoder charset='UTF-8'>
            <pattern>
                ${pattern}
            </pattern>
        </encoder>

        <!-- 设置滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 输出路径 -->
            <fileNamePattern>C:/logs/info/${logName}</fileNamePattern>
            <!--文件最大保存周期，默认7天-->
            <maxHistory>30</maxHistory>
            <!--单个文件最大存储-->
            <maxFileSize>20MB</maxFileSize>
            <!--所有归档文件总的大小限制-->
            <totalSizeCap>2GB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <!-- 打印ERROR级别的日志 -->
    <appender name="fileError" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 只输出ERROR级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <encoder charset='UTF-8'>
            <pattern>
                ${pattern}
            </pattern>
        </encoder>

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>C:/logs/err/${logName}</fileNamePattern>
            <maxHistory>30</maxHistory>
            <maxFileSize>20MB</maxFileSize>
            <totalSizeCap>2GB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <!--
        <logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<logger>有一个必选的name，一个可选的level和一个可选的addtivity属性。
        name:用来指定受此loger约束的某一个包或者具体的某一个类。
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。
        addtivity:是否向上级logger传递打印信息。默认是true(当为true时，还会被匹配到的root再次输出一次log)。
    -->

    <!-- 多环境日志
         测试环境+开发环境. 多个使用逗号隔开.
         <springProfile name="test,dev">
            <logger name="springboot.log.demo.controller" level="DEBUG" additivity="false">
                <appender-ref ref="consoleLog"/>
            </logger>
        </springProfile>

        生产环境
        <springProfile name="prod">
            <logger name="springboot.log.demo.controller" level="INFO" additivity="false">
                <appender-ref ref="consoleLog"/>
            </logger>
        </springProfile>
    -->

    <!--
        注意这个节点要写在最后
        level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。默认是DEBUG。
        可以包含零个或多个元素，标识这个appender将会添加到这个loger。
    -->
    <root level="INFO">
        <appender-ref ref="console"/>
        <appender-ref ref="fileInfo"/>
        <appender-ref ref="fileError"/>
    </root>
</configuration>